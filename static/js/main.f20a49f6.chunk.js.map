{"version":3,"sources":["actions/index.js","actions/ActionTypes.js","components/DateDisplay.js","elements/Button.js","elements/TextInput.js","components/TodoList.js","components/Menu.js","components/TodoItem.js","global/GlobalStyle.js","App.js","serviceWorker.js","reducers/DateHandler.js","reducers/TodoHandler.js","reducers/index.js","utilities/LocalStorage.js","index.js","utilities/Store.js"],"names":["updateDate","date","type","addTodo","text","deleteTodo","id","toggleTodo","fadeIn","toward","distance","arguments","length","undefined","keyframes","_templateObject","DateText","styled","h2","_templateObject2","TimeText","h3","_templateObject3","DateDisplay","_this","this","setInterval","Date","props","_this$props","year","month","day","hours","minutes","seconds","period","react_default","a","createElement","className","months","concat","formatDate","Component","connect","state","Object","objectSpread","DateHandler","dispatch","bindActionCreators","actions","circle","div","Button_templateObject","_ref","width","_ref2","_ref3","_ref4","color","round","input","TextInput_templateObject","fontSize","borderRadius","InputField","TodoList_templateObject","TextInput","TodoItems","ul","TodoList_templateObject2","TodoHandler","data","todoItems","TextInput_namespaceObject","placeholder","inputFieldHeight","onKeyPress","e","charCode","target","value","Button_namespaceObject","onClick","document","querySelector","textInput","scrollTop","components_TodoItem","key","accessories","map","item","console","log","assign","onComplete","onDelete","onRedo","Menu_templateObject","Menu_templateObject2","completed","index_es","icon","faRedo","faCheck","faTimes","TodoItem_templateObject","_ref5","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","Main","main","App_templateObject","components_DateDisplay","components_TodoList","global_GlobalStyle","App_templateObject2","Boolean","window","location","hostname","match","initialState","formatTimeElement","element","isHours","action","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","nextTodoId","trim","toConsumableArray","filter","todoItem","reducers","combineReducers","loadState","serializedState","localStorage","getItem","JSON","parse","err","store","createStore","loadStore","subscribe","stringify","setItem","_unused","alert","saveState","getState","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f20a49f6.chunk.js","sourcesContent":["import * as types from \"./ActionTypes\";\n\nexport const updateDate = date => {\n  return {\n    type: types.UPDATE_DATE,\n    date\n  };\n};\nexport const addTodo = text => {\n  return {\n    type: types.ADD_TODO,\n    text\n  };\n};\n\nexport const deleteTodo = id => {\n  return {\n    type: types.DELETE_TODO,\n    id\n  };\n};\n\nexport const toggleTodo = id => {\n  return {\n    type: types.TOGGLE_TODO,\n    id\n  };\n};\n","export const UPDATE_DATE = \"UPDATE_DATE\";\n\n//Todo action types\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n","import React, { Component } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\n//import PropTypes from \"prop-types\";\n//import \"./index.css\"\nconst fadeIn = (toward, distance = 100) => keyframes`\n  from {\n    ${toward}: ${distance}px;\n    opacity: 0\n  }\n  to {\n    ${toward}: 0px;\n    opacity: 1\n  }\n`;\nconst DateText = styled.h2`\n  position: relative;\n  font-family: monospace;\n  font-size: 8em;\n  font-weight: 100;\n  color: white;\n  text-align: right;\n  margin-bottom: 8px;\n  animation: ${fadeIn(\"left\")} 1s ease-in-out 1;\n`;\nconst TimeText = styled.h3`\n  position: relative;\n  font-family: monospace;\n  font-size: 3em;\n  font-weight: 300;\n  color: white;\n  text-align: right;\n  padding-right: 32px;\n  animation: ${fadeIn(\"top\", 32)} 1s ease-in-out 1;\n`;\nclass DateDisplay extends Component {\n  componentWillMount() {\n    setInterval(() => {\n      const date = new Date();\n      this.props.updateDate(date);\n    }, 100);\n  }\n  render() {\n    const { year, month, day, hours, minutes, seconds, period } = this.props;\n    const formatDate = () => {\n      const months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n      ];\n      if (months[month] && day && year) {\n        return `${months[month]} ${day}, ${year}`;\n      } else {\n        return \"\";\n      }\n    };\n    const formatTime = () => {\n      if (hours && minutes && seconds && period) {\n        return `${hours}:${minutes}:${seconds} ${period}`;\n      } else {\n        return \"\";\n      }\n    };\n\n    return (\n      <div className=\"date-display\">\n        <div>\n          <DateText>{formatDate()}</DateText>\n          <TimeText>{formatTime()}</TimeText>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ...state.DateHandler\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(actions, dispatch);\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateDisplay);\n","import styled from \"styled-components\";\n\nexport const circle = styled.div`\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${({ width }) => width}px;\n  height: ${({ width }) => width}px;\n  border-radius: 50%;\n  font-size: ${({ width }) => width * 0.3}px;\n  font-weight: 700;\n  color: ${({ color }) => color};\n  box-shadow: 0 0 5px darkgray;\n  transition: box-shadow 0.2s ease-in-out;\n  &:hover {\n    cursor: pointer;\n    box-shadow: 0 0 20px darkgray;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const round = styled.input`\n  flex: 1;\n  font-size: ${({ fontSize }) => fontSize}px;\n  padding: 0 0.8em;\n  font-weight: 200;\n  border: none;\n  border-radius: ${({ borderRadius }) => borderRadius}px;\n`;\n","import React from \"react\";\nimport { Button, TextInput } from \"../elements\";\nimport styled from \"styled-components\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\nimport { TodoItem } from \"../components\";\n\nconst InputField = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  ${TextInput.round} {\n    max-width: 960px;\n    margin-right: 1em;\n    &:focus {\n      outline: none;\n    }\n  }\n  margin-bottom: 1em;\n`;\nconst TodoItems = styled.ul`\n  width: 100%;\n  max-width: 1026px;\n  height: 240px;\n  border: none;\n  border-radius: 25px;\n  overflow: scroll;\n`;\nconst TodoList = ({\n  className,\n  todoItems,\n  addTodo,\n  deleteTodo,\n  toggleTodo\n}) => {\n  const inputFieldHeight = 50;\n  const mapToComponents = data => {\n    if (data === undefined || data.length === 0) {\n      return <TodoItem key=\"empty\" text=\"Empty\" accessories={false} />;\n    }\n    return data.map(item => {\n      console.log(item);\n      return (\n        <TodoItem\n          key={item.id}\n          {...item}\n          accessories={true}\n          onComplete={() => {\n            toggleTodo(item.id);\n          }}\n          onDelete={() => {\n            deleteTodo(item.id);\n          }}\n          onRedo={() => {\n            toggleTodo(item.id);\n          }}\n        />\n      );\n    });\n  };\n  return (\n    <div className=\"todo-list\">\n      <InputField>\n        <TextInput.round\n          className=\"text-input\"\n          type=\"text\"\n          placeholder=\"Type something\"\n          fontSize=\"16\"\n          borderRadius={inputFieldHeight / 2}\n          onKeyPress={e => {\n            if (e.charCode === 13) {\n              addTodo(e.target.value);\n              e.target.value = \"\";\n            }\n          }}\n        />\n        <Button.circle\n          width={inputFieldHeight}\n          fontSize=\"100\"\n          color=\"#194a2f\"\n          onClick={() => {\n            const text = document.querySelector(\".text-input\");\n            const textInput = document.querySelector(\".text-input\");\n            const todoItems = document.querySelector(\".todo-items\");\n            addTodo(text.value);\n            textInput.value = \"\";\n            todoItems.scrollTop = 0;\n          }}\n        >\n          Add\n        </Button.circle>\n      </InputField>\n      <TodoItems className=\"todo-items\">{mapToComponents(todoItems)}</TodoItems>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    ...state.TodoHandler\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(actions, dispatch);\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst MenuIconContainer = styled.div`\n  position: absolute;\n  top: 1em;\n  right: 1em;\n  width: 48px;\n  height: 48px;\n  cursor: pointer;\n  .active {\n    background: transparent;\n    box-shadow: none;\n  }\n  .active:before {\n    top: 0;\n    transform: rotate(135deg);\n  }\n  .active:after {\n    top: 0;\n    transform: rotate(45deg);\n  }\n`;\nconst MenuIcon = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 48px;\n  height: 6px;\n  border-radius: 3px;\n  background-color: white;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  transform: translate(0, -50%);\n  transition: 0.5s;\n  &:before,\n  &:after {\n    content: \"\";\n    position: absolute;\n    width: 48px;\n    height: 6px;\n    border-radius: 3px;\n    background-color: white;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n    transition: 0.5s;\n  }\n  &:before {\n    top: -16px;\n  }\n  &:after {\n    top: 16px;\n  }\n`;\n\nconst Menu = ({ className }) => {\n  const toggleSideMenu = () => {\n    const menuIcon = document.querySelector(\".menu-icon\");\n    const sideMenu = document.querySelector(\".side-menu\");\n    menuIcon.classList.toggle(\"active\");\n    sideMenu.classList.toggle(\"opened\");\n  };\n  return (\n    <MenuIconContainer className={className} onClick={toggleSideMenu}>\n      <MenuIcon className=\"menu-icon\" />\n    </MenuIconContainer>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTimes, faRedo } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TodoItem = ({\n  className,\n  text,\n  completed,\n  onComplete,\n  onDelete,\n  onRedo\n}) => {\n  return (\n    <li className={className}>\n      <span className=\"todo-text\">{text}</span>\n      <span className=\"completed-text\">Completed</span>\n      <div className=\"todo-icon-container\">\n        {completed ? (\n          <FontAwesomeIcon\n            className=\"todo-icon\"\n            icon={faRedo}\n            onClick={onComplete}\n          />\n        ) : (\n          <FontAwesomeIcon\n            className=\"todo-icon\"\n            icon={faCheck}\n            onClick={onRedo}\n          />\n        )}\n        <FontAwesomeIcon\n          className=\"todo-icon\"\n          icon={faTimes}\n          onClick={onDelete}\n        />\n      </div>\n    </li>\n  );\n};\n\nexport default styled(TodoItem)`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-bottom: 1px solid white;\n  padding: 0 0 0 1em;\n  .todo-text {\n    flex: 1;\n    text-decoration: ${({ completed }) => (completed ? \"line-through\" : \"none\")}\n    font-size: 1em;\n    color: ${({ completed }) => (completed ? \"lightGray\" : \"white\")}\n  }\n  .completed-text {\n    visibility: ${({ accessories, completed }) =>\n      accessories && completed ? \"visible\" : \"hidden\"}\n    color: lightGray;\n    width: 100px;\n    text-align: center;\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n  .todo-icon-container {\n    visibility: ${({ accessories }) => (accessories ? \"visible\" : \"hidden\")}\n    background-color: #194a2f;\n    height: 100%;\n    padding: 1em;\n    .todo-icon {\n      color: white;\n      margin-right: 1em;\n      &:last-child {\n        margin-right: 0;\n      }\n      &:hover {\n        cursor: pointer;\n      }\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  /* http://meyerweb.com/eric/tools/css/reset/ \n  v2.0 | 20110126\n  License: none (public domain)\n  */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  .App {\n    height: 100vh;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport { DateDisplay, TodoList } from \"./components\";\nimport { GlobalStyle } from \"./global\";\nimport styled from \"styled-components\";\n\nconst App = ({ className }) => {\n  return (\n    <div className={className}>\n      <Main>\n        <DateDisplay />\n        <TodoList />\n      </Main>\n      <GlobalStyle />\n    </div>\n  );\n};\nconst Main = styled.main`\n  width: 100%;\n`;\n\nexport default styled(App)`\n  background-color: #194a2f;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  perspective: 50em;\n  position: relative;\n  .date-display {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 3em;\n  }\n  .todo-list {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 1em;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from \"../actions/ActionTypes\";\n\nconst initialState = {\n  year: \"\",\n  month: \"\",\n  day: \"\",\n  hours: \"\",\n  minutes: \"\",\n  seconds: \"\",\n  period: \"\"\n};\nconst formatTimeElement = (element, isHours) => {\n  if (isHours && element > 12) {\n    element %= 12;\n  }\n  if (element < 10) {\n    return `0${element}`;\n  } else {\n    return element;\n  }\n};\nconst DateHandler = (state = initialState, action) => {\n  switch (action.type) {\n    case types.UPDATE_DATE:\n      return {\n        year: action.date.getFullYear(),\n        month: action.date.getMonth(),\n        day: action.date.getDate(),\n        hours: formatTimeElement(action.date.getHours(), true),\n        minutes: formatTimeElement(action.date.getMinutes(), false),\n        seconds: formatTimeElement(action.date.getSeconds(), false),\n        period: action.date.getHours() > 12 ? \"PM\" : \"AM\"\n      };\n    default:\n      return state;\n  }\n};\n\nexport default DateHandler;\n","import * as types from \"../actions/ActionTypes\";\n\n/*\n{\n  id: Int,\n  title: String,\n  completed: Bool\n}\n*/\nconst initialState = {\n  nextTodoId: 0,\n  todoItems: []\n};\n\nconst TodoHandler = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_TODO:\n      if (action.text.trim() === \"\") return state;\n      return {\n        nextTodoId: state.nextTodoId + 1,\n        todoItems: [\n          {\n            id: `todo-${state.nextTodoId}`,\n            text: action.text,\n            completed: false\n          },\n          ...state.todoItems\n        ]\n      };\n    case types.DELETE_TODO:\n      return {\n        ...state,\n        todoItems: state.todoItems.filter(todoItem => todoItem.id !== action.id)\n      };\n    case types.TOGGLE_TODO:\n      return {\n        ...state,\n        todoItems: state.todoItems.map(todoItem =>\n          todoItem.id === action.id\n            ? {\n                ...todoItem,\n                completed: !todoItem.completed\n              }\n            : todoItem\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport default TodoHandler;\n","import { combineReducers } from \"redux\";\nimport DateHandler from \"./DateHandler\";\nimport TodoHandler from \"./TodoHandler\";\nconst reducers = combineReducers({\n  DateHandler,\n  TodoHandler\n});\n\nexport default reducers;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"binder-state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"binder-state\", serializedState);\n  } catch {\n    alert(\"An error has occurred while saving your data.\");\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducers from \"./reducers\";\nimport { loadStore, saveState } from \"./utilities\";\nimport { Provider } from \"react-redux\";\n\nconst store = loadStore(reducers);\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\";\nimport { loadState } from \"./LocalStorage\";\n\nconst loadStore = reducers => {\n  return loadState() === undefined\n    ? createStore(reducers)\n    : createStore(reducers, loadState());\n};\n\nexport default loadStore;\n"],"sourceRoot":""}